=========================
REST Client Server Design
=========================

This documents describes the architecture and design of the REST client and
server, as well as the testing setup. It will also cover some details of the
implementation as far as those are required for finishing the implementation or
extending the software.

Architecture
============

.. figure:: architecture.svg
    :alt:   System architecture

    System architecture

As the figure shows the architecture depends on several layers.

The basic idea behind the architecture is the following:

    The user should be able to use the REST Client (SDK) just like the public
    API on a local system.

Thus a PHP client (script) will likely use the REST Client SDK, which
implements the full Public API.

The SDK implements a client which will communicate with the REST Server. The
communication may use XML or JSON as a transport encoding format. The used
encoding will depend on content types and accept headers provided.

The server is a classic PHP webservice, which understands all requests as
defined in the REST API v3 specification. The server itself then maps the
requests to the REST API back to requests to the public API. Thus the server
may utilize different implementations of the public API. For now this will
likely be the test memory backend or the legacy backend.

The server will of course work independently from the REST Client (SDK), if it
is accessed directly using the REST API. This setup enables us to use the
integration test suite together with the REST Client SDK to verify the client
and the server implement all of the required functionality.

Client & Server Implementation
==============================

.. figure:: client-server.svg
    :alt:   Client Server Interaction

    Client Server Interaction

The figure shows a typical example of client server interaction.

The Simple ``GET`` Request
--------------------------

The first request usually will just point to ``/`` on the server to discover
the servers capabilities. This is simple for the server to process, as it just
needs to return the available services.

The server will typically retrieve the data it should send back to the client
from the public API. The data from the public API is paraphrased as ``$data``
in the figure. This data needs to be converted into JSON or XML depending on
the clients capabilities (which are communicated through ``Accept`` HTTP
headers). For this the ``Common\Output\Visitor`` is used. More details on this
later.

The Client now receives the generated ``$response`` (remember: XML or JSON) and
needs to convert it back into ``$data`` since we are in the SDK and the PHP
scripts wants to retrieve the common ``Value`` objects from the public API. For
this conversion the ``Client\Input\Dispatcher`` is used, which dispatches to
concrete parsers for the ``$response``. More on that later.

A ``POST`` Request
------------------

In a more complex example, where the client wants to transmit data to the
server and not just receive data two more steps are involved in the client
server interaction.

The client has some ``Value`` object structures, which must be transmitted to
the server. For the conversion of the ``$data`` into a proper (JSON or XML)
request ``$body`` again the ``Common\Output\Visitor`` is used, since this
process is very similar to the server output conversion. (It is just some
``$data`` into some JSON or XML conversion)

The server must read some input data now, which was not necessary for the
simple ``GET`` request. This conversion again requires to convert JSON or XML
data (``$body``) into some ``Value`` object structures usable by the public API
implementation. This again is very similar to the Client parsing a servers
answer, so the ``Common\Input\Dispatcher`` is used here.

The server and the clients usually must parse / return slightly different
XML / JSON structures. Because of this the concrete implementations for parsing
some structure or creating some structure are not in the ``Common`` namespace,
but in the ``Server`` and ``Client`` namespace, respectively.

The Output Visitor
==================

The output visitor is a slightly more sophisticated implementation of the
visitor pattern. The basic idea is:

#) Find a proper Visitor for a Value object
#) Use a generator to generate either XML or JSON
#) Iterate this process for all aggregated Value objects

Finding a concrete visitor
--------------------------

Finding a concrete visitor depends on the Value object passed to
``Common\Output\Visitor``. If a visitor has been registered for the exact class
of the passed Value object, this one is used. Otherwise all parent classes are
checked, until a visitor could be found. If there is no visitor for the passed
Value objects nor for any of its parent classes an exception will be thrown.

There is one speciality: The method ``visit()`` may only be called for the
outermost Value object. It starts the document. For all aggregated objects the
method ``visitValueObject()`` should be called.

The concrete visitors for single Value objects will receive a reference to the
``Common\Output\Visitor`` so they can call ``visitValueObject()`` for all
aggregated value objects.

The Generator
-------------

Since we need to generate XML or JSON depending on the client the visitors do
not generate output themselves, but call an implementation of
``Common\Output\Generator`` which does the actual work. This also allows us to
do some error checking, so that only valid structures are generated. The API of
those generators is fairly simple and straight forward. Just take a look at the
API documentation or concrete visitor examples.

The Input Dispatcher
====================

The ``Common\Input\Dispatcher`` receives a ``Message`` object, which contains a
set of message headers and a message body, to parse that. The parsing depends
on the ``Content-Type`` header set. They determine which concrete parser should
be used.

The ``Content-Type`` header also determines the input type (XML or JSON) of the
message. The basic idea of the parsing process therefore is:

#) Receive message
#) Convert message into a native structure from XML or JSON
#) Call a parser (/ handler) for the current data
#) Iterate: For aggregated data call a parser (/handler) for this data.

Data Conversion
---------------

Both, XML and JSON, are converted into a native array structure which then can
be handled by the concrete parsers. For JSON this just means a call to
``json_decode()``, which it is slightly more complex for the XML data.

The XML data is converted by the ``Common\Input\Handler\Xml`` implementation
which will generate the JSON array structure from the XML. There is one
speciality in this conversion process when it comes to lists. Since it is
possible in XML that an element may contain multiple elements with the same
name those are converted into an array in JSON. To ensure that for certain
elements which usually occur multiple times, but may also only occur once, we
force this array conversion for certain elements. See the ``$forceList``
property in ``Common/Input/Handler/Xml.php``.

Calling a parser
----------------

Calling the correct parser (/handler) for an array structure depends on the
associated mime type. This is provided in the message headers for the outermost
element and as a property for all aggregated elements.

The class ``Common\Input\ParsingDispatcher`` maintains a mapping of
Content-Types to concrete parser implementations for this purpose. Thus,
depending on the mime type (/ content type) a parser is called, which then
handles the data and converts it into the corresponding ``Value`` object.

For aggregated data it may call again the ``Common\Input\ParsingDispatcher`` to
dispatch the data handling to a specialized parser.

Running The Tests
=================

There are two sets of tests. The unit tests for the REST server and the
integration tests, which may use the REST SDK and Server.

Since the code is split across the ``research`` and the ``ezp-next``
repositories it is necessary to cross-link some files. Please see the file
``restapiv2/eZ/Publish/API/README.rst`` in the
``https://github.com/ezsystems/research`` repository for details.

The Unit Tests
--------------

The unit tests are currently originated in the
``https://github.com/ezsystems/research`` repository under
``restapiv2/eZ/Publish/API/REST`` and can be executed like::

    phpunit -c phpunit.xml.dist

The Integration Tests
---------------------

To verify that the code works using XML and JSON as transport mechanism this
transport mechanism can be configured using an environment variable. We
prepared two PHPUnit XML configuration files for each variation. To execute the
tests go to ``eZ/Publish/API/Repository/Tests`` in the
``https://github.com/ezsystems/ezp-next`` repository and execute either of the
following lines::

    phpunit -c phpunit-rest-xml.xml
    phpunit -c phpunit-rest-json.xml


..
   Local Variables:
   mode: rst
   fill-column: 79
   End: 
   vim: et syn=rst tw=79
