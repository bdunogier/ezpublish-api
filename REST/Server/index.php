<?php
/**
 * File containing the index.php for the REST Server
 *
 * ATTENTION: This is a test setup for the REST server. DO NOT USE IT IN
 * PRODUCTION!
 *
 * @copyright Copyright (C) 1999-2012 eZ Systems AS. All rights reserved.
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
 * @version //autogentag//
 */

namespace eZ\Publish\API\REST\Server;
use eZ\Publish\API\REST\Common;

use Qafoo\RMF;

require __DIR__ . '/../bootstrap.php';

/*
 * This is a very simple session handling for the repository, which allows the
 * integration tests to run multiple requests against a continuos repository
 * state. This is needed in many test methods, e.g. in
 * SectionServiceTest::testUpdateSection() where there is 1. the section loaded
 * and 2. updated.
 *
 * The test framework therefore issues an X-Test-Session header, with the same
 * session ID for a dedicated test method. The complete repository (including
 * fixture data) is stored serialized at the end of this file.
 */

$stateDir    = __DIR__ . '/_state/';
$sessionFile = null;
$repository  = null;
if ( isset( $_SERVER['HTTP_X_TEST_SESSION'] ) )
{
    // Check if we are in a test session and if, for this session, a repository
    // state file already exists.
    $sessionFile = $stateDir . $_SERVER['HTTP_X_TEST_SESSION'] . '.php';
    if ( is_file( $sessionFile ) )
    {
        $repository = unserialize( file_get_contents( $sessionFile ) );
    }
}

if ( !$repository )
{
    $repository = require __DIR__ . '/../../Repository/Tests/common.php';
}

/*
 * Handlers are used to parse the input body (XML or JSON) into a common array
 * structure, as generated by json_decode( $body, true ).
 */

$handler = array(
    'json' => new Common\Input\Handler\Json(),
    'xml'  => new Common\Input\Handler\Xml(),
);

/*
 * The Input Dispatcher receives the array structure as decoded by a handler
 * fitting the input format. It selects a parser based on the media type of the
 * input, which is used to transform the input into a ValueObject.
 */

$inputDispatcher = new Common\Input\Dispatcher(
    new Common\Input\ParsingDispatcher( array(
        'application/vnd.ez.api.SectionInput'  => new Input\Parser\SectionInput( $repository ),
        'application/vnd.ez.api.ContentUpdate' => new Input\Parser\ContentUpdate( $repository ),
    ) ),
    $handler
);

/*
 * Controllers are simple classes with public methods. They are the only ones
 * working directly with the Request object provided by RMF. Their
 * responsibility is to extract the request data and dispatch the corresponding
 * call to methods of the Public API.
 */

$sectionController = new Controller\Section(
    $inputDispatcher,
    $repository->getSectionService()
);

$contentController = new Controller\Content(
    $inputDispatcher,
    $repository->getContentService(),
    $repository->getSectionService()
);

/*
 * Visitors are used to transform the Value Objects returned by the Public API
 * into the output format requested by the client. In some cases, it is
 * necessary to use Value Objects which are not part of the Public API itself,
 * in order to encapsulate data structures which don't exist there (e.g.
 * SectionList) or to trigger slightly different output (e.g. CreatedSection to
 * generate a "Created" response).
 *
 * A visitor uses a generator (XML or JSON) to generate the output structure
 * according to the API definition. It can also set headers for the output.
 */

$valueObjectVisitors = array(
    '\\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException' => new Output\ValueObjectVisitor\InvalidArgumentException( true ),
    '\\eZ\Publish\API\Repository\Exceptions\NotFoundException'        => new Output\ValueObjectVisitor\NotFoundException( true ),
    '\\eZ\Publish\API\Repository\Exceptions\BadStateException'        => new Output\ValueObjectVisitor\BadStateException( true ),
    '\\Exception'                                                     => new Output\ValueObjectVisitor\Exception( true ),

    '\\eZ\\Publish\\API\\REST\\Server\\Values\\SectionList'           => new Output\ValueObjectVisitor\SectionList(),
    '\\eZ\\Publish\\API\\REST\\Server\\Values\\CreatedSection'        => new Output\ValueObjectVisitor\CreatedSection(),
    '\\eZ\\Publish\\API\\Repository\\Values\\Content\\Section'        => new Output\ValueObjectVisitor\Section(),

    '\\eZ\\Publish\\API\\REST\\Server\\Values\\ContentList'           => new Output\ValueObjectVisitor\ContentList(),
    '\\eZ\\Publish\\API\\Repository\\Values\\Content\\ContentInfo'    => new Output\ValueObjectVisitor\ContentInfo(),
);

/*
 * The RMF dispatcher is the core of the MVC. It selects a controller method on
 * basis of the request URI (regex match) and the HTTP verb, which is then executed.
 * After the controller has been executed, the view (second parameter) is
 * triggered to send the result to the client. The Accept Header View
 * Dispatcher selects from different view configurations the output format
 * based on the Accept HTTP header sent by the client.
 *
 * The used inner views are custom to the REST server and dispatch the received
 * Value Object to one of the visitors registered above.
 */

$dispatcher = new RMF\Dispatcher\Simple(
    new RMF\Router\Regexp( array(
        '(^/content/sections(\?.*)?$)' => array(
            'GET'  => array( $sectionController, 'listSections' ),
            'POST' => array( $sectionController, 'createSection' ),
        ),
        '(^/content/sections/(?P<id>[0-9]+)$)' => array(
            'GET'    => array( $sectionController, 'loadSection' ),
            'PATCH'  => array( $sectionController, 'updateSection' ),
            'DELETE' => array( $sectionController, 'deleteSection' ),
        ),
        '(^/content/objects\?remoteId=(?P<id>[0-9a-f]+)$)' => array(
            'GET'   => array( $contentController, 'loadContentInfoByRemoteId' ),
        ),
        '(^/content/objects/(?<id>[0-9]+)$)' => array(
            'PATCH' => array( $contentController, 'updateContentMetadata' ),
        ),
    ) ),
    new RMF\View\AcceptHeaderViewDispatcher( array(
        '(^application/vnd\\.ez\\.api\\.[A-Za-z]+\\+json$)' => new View\Visitor(
            new Common\Output\Visitor(
                new Common\Output\Generator\Json(),
                $valueObjectVisitors
            )
        ),
        '(^application/vnd\\.ez\\.api\\.[A-Za-z]+\\+xml$)'  => new View\Visitor(
            new Common\Output\Visitor(
                new Common\Output\Generator\Xml(),
                $valueObjectVisitors
            )
        ),
        '(^.*/.*$)'  => new View\InvalidApiUse(),
    ) )
);

/*
 * The simple request abstraction class provided by RMF allows handlers to be
 * registered, which extract request data and provide it via property access in
 * a manor of lazy loading.
 */

$request = new RMF\Request\HTTP();
$request->addHandler( 'body', new RMF\Request\PropertyHandler\RawBody() );
$request->addHandler( 'contentType', new RMF\Request\PropertyHandler\Server( 'HTTP_CONTENT_TYPE' ) );
$request->addHandler( 'method', new RMF\Request\PropertyHandler\Override( array(
    new RMF\Request\PropertyHandler\Server( 'HTTP_X_HTTP_METHOD_OVERRIDE' ),
    new RMF\Request\PropertyHandler\Server( 'REQUEST_METHOD' ),
) ) );

/*
 * This triggers working of the MVC.
 */
$dispatcher->dispatch( $request );

/*
 * The session state is stored, if a session file was specified at the
 * beginning of the script. This is only necessary for the test setup.
 */
if ( $sessionFile )
{
    file_put_contents( $sessionFile, serialize( $repository ) );
}

